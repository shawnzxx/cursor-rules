---
description: Project structure guidelines for file organization and architecture
globs: 
alwaysApply: true
---

Always start your output with "Hey DDD buddy here!"

This is my file strcuture, always use it as a guide so that you edit the right files 
The whole project follow [Clean Architecture](mdc:https:/blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html) concept, with different package naming.
- api layer = Clean Architecture Controllers
- app layer = Clean Architecture Use Cases
- business layer = Clean Architecture Entities
- repository = Clean Architecture Data Access

```
├── .githooks/                  # Git hooks for pre-commit and pre-push checks
├── api/                        # Backend code
│   ├── cmd/                    # Command layer - executable binary root packages
│   │   ├── serverd/            # Main API server binary
│   │   │   └── router/         # HTTP ingress routes
│   │   ├── job/                # Batch jobs binary
│   │   │   └── testcase/       # Test cases for jobs
│   │   ├── consumer/           # Consumer services binary
│   │   ├── banner/             # Banner related services binary
│   │   ├── producer/           # Producer services binary
│   │   ├── tooling/            # Development tools binary
│   │   │   ├── batch/          # Batch processing tools
│   │   │   └── logfmt/         # Log formatting utilities
│   │   └── internal/           # Shared internal components for cmd packages
│   │       └── components/     # Reusable initialization code
│   ├── data/                   # SQL files for direct DB manipulation
│   │   ├── migrations/         # Migration files for database schema changes
│   │   └── seed/               # Seeding data for local development
│   ├── internal/               # Internal application code
│   │   ├── api/                # API layer (Controllers in Clean Architecture)
│   │   │   ├── domain/         # Domain specific API handlers
│   │   │   │   ├── kafka/      # Kafka-specific API handlers
│   │   │   │   └── rest/       # REST API handlers
│   │   │   └── sdk/            # Shared SDK components for domain
│   │   │       ├── kconsumer/  # Kafka consumer components
│   │   │       ├── kconsumermid/ # Kafka consumer middleware
│   │   │       └── mid/        # General middleware components
│   │   ├── app/                # Application layer (Use Cases in Clean Architecture)
│   │   │   ├── domain/         # Domain specific orchestration logic
│   │   │   ├── errs/           # Error handling for the app layer
│   │   │   └── sdk/            # Shared SDK components for domain
│   │   ├── business/           # Domain layer (Entities in Clean Architecture)
│   │   │   ├── domain/         # Domain specific business logic
│   │   │   └── sdk/            # Shared SDK components for domain
│   │   ├── constant/           # Shared constants across the application
│   │   │   ├── metakey/        # Metadata key constants
│   │   │   └── topic/          # Topic-related constants
│   │   └── repository/         # Data access layer
│   │       └── orm/            # Code generated by SQLBoiler
│   ├── system/                 # System-wide common utilities
│   │   ├── admintoken/         # Admin token utilities
│   │   ├── idgenerator/        # ID generation utilities
│   │   ├── kafkaproducer/      # Kafka producer utilities
│   │   ├── order/              # Order-related utilities
│   │   ├── pagination/         # Pagination utilities
│   │   ├── redis/              # Redis integration utilities
│   │   │   └── lua/            # Lua scripts for Redis
│   │   ├── timeutil/           # Time utility functions
│   │   ├── validator/          # Validation utilities
│   │   └── web/                # Web-related utilities
│   ├── go.mod                  # Go module definition
│   ├── go.sum                  # Go module checksums
│   ├── local.env               # Environment configuration for local development
│   ├── README.md               # API-specific documentation
│   └── sqlboiler.yaml          # SQLBoiler configuration
├── build/                      # Build-related files
│   ├── *.Dockerfile            # Docker build definitions
│   ├── docker-compose.*.yaml   # Docker Compose configurations
│   ├── Jenkinsfile.*.groovy    # Jenkins pipeline definitions
│   └── k8s/                    # Kubernetes configurations
│       ├── base/               # Base Kubernetes manifests
│       ├── dev/                # Development environment configs
│       ├── qa/                 # QA environment configs
│       └── prod/               # Production environment configs
├── .cursorignore               # Cursor editor ignore file
├── .cursorrules                # Cursor AI rules file
├── .gitignore                  # Git ignore file
├── .golangci.toml              # Golangci-lint configuration
├── LICENSE                     # Project license
├── Makefile                    # Project-wide make targets
├── README.md                   # Project documentation
└── CODEOWNERS                  # Merge rights & auto reviewer assignment
```

1. **New File Creation**:
   - When you need to create a new file, place it in the appropriate directory
   - api logic shall goes in `${PWD}/api/internal/api/domain/`
   - app logic shall goes in `${PWD}/api/internal/app/domain/`
   - business logic shall goes in `${PWD}/api/internal/business/domain/`
   - system-wide utilities common function shall goes in `${PWD}/api/system/`

2. **Root packages's dependency**:
   - executable binary root packages's dependency init function goes in `${PWD}/api/cmd/internal/components/`

4. **ORM layer**:
   - ORM code logic refer to `${PWD}/api/internal/repository/orm/`

5. **Testing**:
   - Test cases logic refer to `${PWD}/api/cmd/job/testcase/{job_name}/`

6. **Clean Architecture**:
 

7. **When Uncertain**:
   - If uncertain about where to place a new file or directory, ask me in chat window:
     - What layer it belongs to

8. **Constants and Configs**:
   - Application-wide constants go in `${PWD}/api/internal/constant/`
   - Local development environment configurations find in `${PWD}/api/local.env`

