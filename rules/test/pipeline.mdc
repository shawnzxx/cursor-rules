---
description: Guidelines on how to start test development pipeline
globs: *_test.go
alwaysApply: false
---

## Steps to create unit test file:

1. When write the unit test file please refer rule in `.cursor/rules/test/create-test.mdc`
1. If you need to create test data please refer rule in `.cursor/rules/test/prepare-test-data.mdc`
1. If you need to create unit test on db layer please refer rule in `.cursor/rules/test/use-sqlmock.mdc`

## Steps to run test file:

1. Run test file using rules `.cursor/rules/test/run-test.mdc`
1. If you are facing segfaults error, please refer rule in `.cursor/rules/test/prevent-segfault.mdc`

## Steps to check test coverage:

1. Error Analysis & Refinement Loop:
   - Re-run tests with focused scope: `go test -v -run ^TestSpecificFunction$ ./path/to/package`
   - correct test file based on failures
   - correct test data based on failures
   - rerun test file until all test cases pass
   - if you need more details, you can use verbose output (-v flag)
1. Coverage Verification:
   - after all test cases pass, you shall check the test coverage with command:
   - go test -cover ./... -coverprofile=coverage.out
   - go tool cover -html=coverage.out
   - Keep test coverage at least 80%
   - **Exclude mock\_\*.go files from coverage calculation** - these are auto-generated mock files and should not be included in coverage requirements
   - **Focus on business logic coverage** - ensure actual business logic files (\_.go excluding mock\_\_.go) have at least 80% coverage
   - if not meet 80% you shall continue to detect the missing part and write test for that part
   - **Coverage Analysis Commands**:
     - For overall coverage: `go test -cover ./... -coverprofile=coverage.out`
     - For business logic only: `go test -cover ./... -coverprofile=coverage.out && go tool cover -func=coverage.out | grep -v mock_`
     - Check business logic files specifically: `go tool cover -func=coverage.out | grep "\.go:" | grep -v mock_`
